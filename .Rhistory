load("~/AI&Omics/AI&OMICS/Swati_Sudipta_Sahoo_Class_2_Assignment.RData")
load("~/AI&Omics/AI&OMICS/.RData")
load("~/AI&Omics/AI&OMICS/Swati_Sudipta_Sahoo_Class_2_Assignment.RData")
# List all CEL files
cel_files <- list.celfiles( "C:/Users/swati/OneDrive/Documents/AI&Omics/AI_Omics_Internship_2025/E-MTAB-6102", full.names = TRUE)
library(oligo)
# List all CEL files
cel_files <- list.celfiles( "C:/Users/swati/OneDrive/Documents/AI&Omics/AI_Omics_Internship_2025/E-MTAB-6102", full.names = TRUE)
# Read the raw data into an oligo FeatureSet
raw_data <- read.celfiles(cel_files)
# View a summary
raw_data
View(raw_data)
# Read CEL files into R as an AffyBatch object
raw_data <- ReadAffy(celfile.path = "Raw_Data/CEL_Files")
# Load Required Libraries
library(ArrayExpress)             # Download GEO datasets (series matrix, raw CEL files)
library(affy)                 # Pre-processing of Affymetrix microarray data (RMA normalization)
library(arrayQualityMetrics)  # QC reports for microarray data
library(dplyr)                # Data manipulation
library(oligo)
# Read CEL files into R as an AffyBatch object
raw_data <- ReadAffy(celfile.path = "Raw_Data/CEL_Files")
arrayQualityMetrics(expressionset = raw_data,
outdir = "Results/QC_Raw_Data",
force = TRUE,
do.logtransform = TRUE)
getwd()
setwd("C:/Users/swati/OneDrive/Documents/AI&Omics/AI_Omics_Internship_2025")
arrayQualityMetrics(expressionset = raw_data,
outdir = "Results/QC_Raw_Data",
force = TRUE,
do.logtransform = TRUE)
dir.create("Module_II")
file.rename("E-MTAB-6102", "Module_II/E-MTAB-6102")  # move CEL folder
file.rename("Results", "Module_II/Results")          # move QC results
file.rename("3B.R", "Module_II/3B.R")  # move R script
normalized_data <- rma(raw_data)
# Load Required Libraries
library(ArrayExpress)             # Download GEO datasets (series matrix, raw CEL files)
library(affy)                 # Pre-processing of Affymetrix microarray data (RMA normalization)
library(arrayQualityMetrics)  # QC reports for microarray data
library(dplyr)                # Data manipulation
library(oligo)
normalized_data <- rma(raw_data)
View(normalized_data)
View(raw_data)
# QC after data normalization
arrayQualityMetrics(expressionset = normalized_data,
outdir = "Results/QC_Normalized_Data",
force = TRUE)
warnings()
# Extract normalized expression values into a data frame
processed_data <- as.data.frame(exprs(normalized_data))
dim(processed_data)   # Dimensions: number of probes × number of samples
# Filter Low-Variance Transcripts (“soft” intensity based filtering)
# Calculate median intensity per probe across samples
row_median <- rowMedians(as.matrix(processed_data))
# Visualize distribution of probe median intensities
hist(row_median,
breaks = 100,
freq = FALSE,
main = "Median Intensity Distribution")
View(processed_data)
# Set a threshold to remove low variance probes (dataset-specific, adjust accordingly)
threshold <- 0.4
abline(v = threshold, col = "black", lwd = 2)
# Set a threshold to remove low variance probes (dataset-specific, adjust accordingly)
threshold <- 0.5
abline(v = threshold, col = "black", lwd = 2)
# Set a threshold to remove low variance probes (dataset-specific, adjust accordingly)
threshold <- 0.6
abline(v = threshold, col = "black", lwd = 2)
# Set a threshold to remove low variance probes (dataset-specific, adjust accordingly)
threshold <- 0.7
abline(v = threshold, col = "black", lwd = 2)
# Select probes above threshold
indx <- row_median > threshold
filtered_data <- processed_data[indx, ]
# Rename filtered expression data with sample metadata
colnames(filtered_data) <- rownames(phenotype_data)
# Overwrite processed data with filtered dataset
processed_data <- filtered_data
View(filtered_data)
nrow(processed_data)      # Before filtering
nrow(filtered_data)       # After filtering
# Set a threshold to remove low variance probes (dataset-specific, adjust accordingly)
threshold <- 0.8
abline(v = threshold, col = "black", lwd = 2)
# Select probes above threshold
indx <- row_median > threshold
filtered_data <- processed_data[indx, ]
nrow(processed_data)      # Before filtering
nrow(filtered_data)       # After filtering
# Overwrite processed data with filtered dataset
processed_data <- filtered_data
View(processed_data)
#phenotype data preparation
sdrf_path <- "C:/Users/swati/OneDrive/Documents/AI&Omics/AI_Omics_Internship_2025/Module_II/E-MTAB-6102/E-MTAB-6102.sdrf.txt"
# Load the SDRF file into R as a data frame
sdrf_data <- read.delim(sdrf_path, header = TRUE, sep = "\t", stringsAsFactors = FALSE)
# Check first few rows
head(sdrf_data)
View(sdrf_data)
# Replace processed_data column names with SDRF first column
colnames(processed_data) <- sdrf_data[, 1]
# Verify new column names
head(colnames(processed_data))
# Phenotype Data Preparation
class(sdrf_data$Factor.Value.disease.)
# Define experimental groups (normal vs cancer)
groups <- factor(sdrf_data$Factor.Value.disease.,
levels = c("normal", "bladder carcinoma"),
label = c("normal", "cancer"))
class(groups)
levels(groups)
